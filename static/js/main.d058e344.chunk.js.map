{"version":3,"sources":["app/service/score.ts","app/pages/page_one.tsx","app/App.tsx","app/reportWebVitals.ts","index.tsx"],"names":["Result","ScoreService","determineResult","prediction","homeScore","split","awayScore","DRAW","HOME_WIN","AWAY_WIN","determinePointsForGame","result","console","log","determinePoints","results","scores","players","map","player","index","score","games","game","predictions","reduce","sum","current","ScoreDisplay","props","className","AllResults","sheet","values","row","outerIndex","entry","PredictionsDisplay","slice","round","time","teamA","teamB","PageOne","useState","setSheet","localStorage","getItem","token","setToken","loggedIn","setLoggedIn","useEffect","fetch","process","then","ok","removeItem","Error","json","clientId","buttonText","onSuccess","res","setItem","accessToken","onFailure","error","cookiePolicy","scope","App","redirect","sessionStorage","location","href","history","replaceState","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d058e344.chunk.js","sourcesContent":["interface Game {\n    time: string;\n    teamA: string;\n    teamB: string;\n    predictions: string[];\n    result: string;\n  }\n  \nexport interface Results {\n    players: string[];\n    games: Game[];\n}\n\nexport interface Score {\n    player: string;\n    score: number;\n}\n\nenum Result {\n    HOME_WIN,\n    DRAW,\n    AWAY_WIN\n}\n\nclass ScoreService {\n    determineResult = (prediction: string): Result => {\n        const homeScore = prediction.split('-')[0];\n        const awayScore = prediction.split('-')[1];\n        if (homeScore == awayScore) {\n            return Result.DRAW;\n        }\n        if (homeScore > awayScore) {\n            return Result.HOME_WIN;\n        }\n        return Result.AWAY_WIN;\n    }\n\n    determinePointsForGame = (prediction: string, result: string): number => {\n        console.log(prediction);\n        console.log(result);\n        if (prediction == result) {\n            return 3;\n        }\n        if (this.determineResult(prediction) === this.determineResult(result)){\n            return 1;\n        }\n        return 0;\n    };\n\n    determinePoints = (results: Results): Score[] => {\n        const scores = results.players.map((player, index) => {\n            const score = results.games.map((game) => {\n                const points = this.determinePointsForGame(game.predictions[index], game.result);\n                return points;\n            }).reduce((sum, current) => sum + current, 0);\n            return {\n                player: player,\n                score: score\n            };\n        });\n        console.log(scores);\n        return scores;\n    };\n}\n\nexport default ScoreService;","import React, {useEffect, useState} from 'react';\nimport 'app/pages/Pages.css';\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline } from 'react-google-login';\nimport ScoreService, {Results, Score} from 'app/service/score';\n\ninterface SheetsResult {\n  values: string[][];\n}\n\ninterface PredictionsProps {\n  sheet: SheetsResult;\n}\n\nconst getResultsFromSheet: (sheet: SheetsResult) => Results = (sheet: SheetsResult) => {\n  const players = sheet.values[0].slice(4, 7);\n  const games = sheet.values.slice(1).map((row) => {\n    const game = {\n      round: row[0],\n      time: row[1],\n      teamA: row[2],\n      teamB: row[3],\n      predictions: row.slice(4,7),\n      result: row[7]\n    };\n    return game;\n  });\n  return {\n    players: players,\n    games: games\n  }\n};\n\nconst ScoreDisplay = (props: {scores: Score[]}) => {\n  const scores = props.scores;\n  return <table className=\"score-table\">\n      <tbody>\n        <tr>\n          {scores.map((score: Score, index) => {\n            return <td key={index}>{score.player}</td>;\n          })}\n        </tr>\n        <tr>\n          {scores.map((score: Score, index) => {\n              return <td key={index}>{score.score}</td>;\n          })}          \n        </tr>\n      </tbody>\n    </table>\n}\n\nconst AllResults = (props: {sheet: SheetsResult}) => {\n  return <table className=\"results-table\">\n    <tbody>\n      {props.sheet.values.map((row, outerIndex) => {\n        return <tr key={outerIndex}>\n          {row.map((entry, index) => {\n            return <td key={index}>{entry}</td>;\n          })}\n        </tr>\n      })}\n    </tbody>\n  </table>;\n};\n\nconst PredictionsDisplay = (props: PredictionsProps) => {\n  const results = getResultsFromSheet(props.sheet);\n  const scoreService = new ScoreService();\n  const scores = scoreService.determinePoints(results);\n\n  return <div>\n    <ScoreDisplay scores={scores} />\n    <AllResults sheet={props.sheet} />\n  </div>;\n};\n\nconst PageOne: React.FC = () => {\n  const [sheet, setSheet] = useState<SheetsResult>();\n  const [token, setToken] = useState<string>(localStorage.getItem(\"token\") || \"\");\n  const [loggedIn, setLoggedIn] = useState<boolean>(!!localStorage.getItem(\"token\"));\n\n  const successGoogle = (res: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n    const result = res as GoogleLoginResponse;\n    if (!result) {\n      return;\n    }\n    localStorage.setItem(\"token\", result.accessToken);\n    setToken(result.accessToken);\n    setLoggedIn(true);\n  };\n\n  const logOut = () => {\n    setToken(\"\");\n    setLoggedIn(false);\n    localStorage.removeItem(\"token\");\n  };\n\n  useEffect(() => {\n    if (token) {\n      fetch(`https://sheets.googleapis.com/v4/spreadsheets/${process.env.REACT_APP_SPREADSHEET_ID}/values/Sheet1!A1:H20?access_token=${token}`).then((result) => {\n        if (!result.ok) {\n          logOut();\n          throw Error(\"\");\n        }\n        return result.json();\n      }).then((result) => {\n        setSheet(result);\n      });\n    }\n  }, [token])\n\n  //eslint-disable-next-line\n  const failGoogle = (error: any) => {\n    setLoggedIn(false);\n  };\n  const clientId = `${process.env.REACT_APP_CLIENT_ID}`;\n\n  return (\n    <div className=\"App\">\n      <div>\n        {sheet\n          ? <PredictionsDisplay sheet={sheet} />\n          : null\n        }\n      </div>\n      {\n        !loggedIn\n        ? <GoogleLogin \n        clientId={clientId}\n        buttonText=\"Login\"\n        onSuccess={successGoogle}\n        onFailure={failGoogle}\n        cookiePolicy={'single_host_origin'}\n        scope={\"https://www.googleapis.com/auth/spreadsheets.readonly\"} />\n        : null\n      }\n    </div>\n  );\n}\n\nexport default PageOne;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport PageOne from 'app/pages/page_one';\n\nconst App: React.FC = () => {\n  const redirect = sessionStorage.redirect;\n  delete sessionStorage.redirect;\n  if (redirect && redirect != location.href) {\n    history.replaceState(null, process.env.REACT_APP_BASE_URL || '', redirect);\n  }\n\n  return (\n  <Router basename={process.env.REACT_APP_BASE_URL}>\n    <div>\n      <Switch>\n        <Route path=\"/\">\n          <PageOne />\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'app/App';\nimport reportWebVitals from 'app/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}