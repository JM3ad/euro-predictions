{"version":3,"sources":["app/service/score-service.ts","app/components/results-headers.tsx","app/components/results.tsx","app/components/score-display.tsx","app/components/predictions-display.tsx","app/pages/predictions.tsx","app/service/google-sheets-service.ts","app/App.tsx","app/reportWebVitals.ts","index.tsx"],"names":["GameResult","PredictionResult","ScoreService","determineResult","prediction","homeScore","split","awayScore","DRAW","HOME_WIN","AWAY_WIN","determinePredictionResult","result","CORRECT_SCORE","CORRECT_RESULT","INCORRECT_RESULT","UNDETERMINED","determinePointsForGame","determinePoints","results","players","map","player","index","score","games","game","predictions","reduce","sum","current","ResultsHeaders","props","playerName","GameRow","getPredictionClassName","round","time","teamA","teamB","entry","className","AllResults","outerIndex","ScoreDisplay","orderedScores","scores","sort","a","b","reverse","PredictionsDisplay","PredictionsPage","useState","setResults","localStorage","getItem","token","setToken","loggedIn","setLoggedIn","useEffect","sheetsUrl","process","fetch","then","ok","Error","json","sheet","values","slice","row","fetchResults","catch","removeItem","clientId","buttonText","onSuccess","res","setItem","accessToken","onFailure","error","cookiePolicy","scope","App","redirect","sessionStorage","location","href","history","replaceState","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5994712d.chunk.js","sourcesContent":["import { Results } from \"app/models/Results\";\nimport { Score } from \"app/models/Score\";\n\nenum GameResult {\n    HOME_WIN,\n    DRAW,\n    AWAY_WIN\n}\n\nexport enum PredictionResult {\n    CORRECT_SCORE,\n    CORRECT_RESULT,\n    INCORRECT_RESULT,\n    UNDETERMINED\n}\n\nclass ScoreService {\n    determineResult = (prediction: string): GameResult => {\n        const homeScore = prediction.split('-')[0];\n        const awayScore = prediction.split('-')[1];\n        if (homeScore == awayScore) {\n            return GameResult.DRAW;\n        }\n        if (homeScore > awayScore) {\n            return GameResult.HOME_WIN;\n        }\n        return GameResult.AWAY_WIN;\n    }\n\n    determinePredictionResult = (prediction: string, result: string): PredictionResult => {\n        if (!result) {\n            return PredictionResult.UNDETERMINED;\n        }\n        if (prediction == result) {\n            return PredictionResult.CORRECT_SCORE;\n        }\n        if (this.determineResult(prediction) === this.determineResult(result)){\n            return PredictionResult.CORRECT_RESULT;\n        }\n        return PredictionResult.INCORRECT_RESULT;\n    }\n\n    determinePointsForGame = (prediction: string, result: string): number => {\n        const predictionResult = this.determinePredictionResult(prediction, result);\n        switch(predictionResult) {\n            case PredictionResult.CORRECT_SCORE:\n                return 3;\n            case PredictionResult.CORRECT_RESULT:\n                return 1;\n            case PredictionResult.INCORRECT_RESULT:\n            case PredictionResult.UNDETERMINED:\n            default:\n                return 0;\n        }\n    };\n\n    determinePoints = (results: Results): Score[] => {\n        const scores = results.players.map((player, index) => {\n            const score = results.games.map((game) => {\n                const points = this.determinePointsForGame(game.predictions[index], game.result);\n                return points;\n            }).reduce((sum, current) => sum + current, 0);\n            return {\n                player: player,\n                score: score\n            };\n        });\n        return scores;\n    };\n}\n\nexport default ScoreService;","import { Results } from 'app/models/Results';\nimport React from 'react';\n\nexport type ResultsProps = {\n    results: Results;\n}\n\nconst ResultsHeaders: React.FC<ResultsProps> = (props: ResultsProps) => {\n    const results = props.results;\n    return <thead>\n    <tr>\n      <th>Match</th>\n      <th>Time</th>\n      <th>Team 1</th>\n      <th>Team 2</th>\n      <th>Result</th>\n      {\n        results.players.map((playerName) => {\n          return <th key={playerName}>{playerName}</th>;\n        })\n      }\n    </tr>\n  </thead>;\n}\n\nexport default ResultsHeaders;","import React from 'react';\nimport ScoreService, { PredictionResult } from 'app/service/score-service';\nimport ResultsHeaders from './results-headers';\nimport { Results } from 'app/models/Results';\nimport { Game } from 'app/models/Game';\n\nexport type ResultsProps = {\n    results: Results;\n}\n\ntype GameRowProps = {\n  game: Game;\n};\n\nconst GameRow: React.FC<GameRowProps> = (props: GameRowProps) => {\n  const game = props.game;\n  const getPredictionClassName = (prediction: string, result: string) => {\n    const scoreService = new ScoreService();\n    const predictionResult = scoreService.determinePredictionResult(prediction, result);\n    switch(predictionResult) {\n      case PredictionResult.CORRECT_SCORE:\n        return \"correct-score\";\n      case PredictionResult.CORRECT_RESULT:\n        return \"correct-result\";\n      case PredictionResult.INCORRECT_RESULT:\n        return \"incorrect-result\";\n      case PredictionResult.UNDETERMINED:\n        return \"\";\n    }\n  }\n  return <>\n    <td>{game.round}</td>\n    <td>{game.time}</td>\n    <td>{game.teamA}</td>\n    <td>{game.teamB}</td>\n    <td>{game.result}</td>\n    {game.predictions.map((entry, index) => {\n      return <td key={index} className={getPredictionClassName(entry, game.result)}>\n        {entry}\n      </td>;\n    })}\n  </>;\n};\n\nconst AllResults: React.FC<ResultsProps> = (props: {results: Results}) => {\n    const results = props.results;\n\n    return <div className=\"table-wrapper\">\n      <table className=\"results-table\">\n        <ResultsHeaders results={results}/>\n        <tbody>\n          {results.games.map((game, outerIndex) => {\n            return <tr key={outerIndex}>\n              <GameRow game={game} />\n            </tr>\n          })}\n        </tbody>\n      </table>\n    </div>;\n  };\n  \nexport default AllResults;  ","import { Score } from 'app/models/Score';\nimport React from 'react';\n\nexport type ScoreProps = {\n    scores: Score[];\n};\n\nconst ScoreDisplay: React.FC<ScoreProps> = (props: ScoreProps) => {\n    const scores = props.scores;\n    const orderedScores = scores.sort((a, b) => a.score - b.score).reverse();\n    return <div className=\"score-table\">\n      <div className=\"table-header\">\n        <div className=\"table-entry\">Scores</div>\n      </div>\n      {orderedScores.map((score: Score) => {\n        return <div key={score.player} className=\"table-row\">\n          <div className=\"table-entry\">{score.player}</div>\n          <div className=\"table-entry\">{score.score}</div>\n        </div>;\n      })}\n    </div>\n}\n  \nexport default ScoreDisplay;","import React from 'react';\nimport ScoreService from 'app/service/score-service';\nimport AllResults from './results';\nimport ScoreDisplay from './score-display';\nimport { Results } from 'app/models/Results';\n\nexport type PredictionsProps = {\n    results: Results;\n}\n\nconst PredictionsDisplay: React.FC<PredictionsProps> = (props: PredictionsProps) => {\n    const results = props.results;\n    const scoreService = new ScoreService();\n    const scores = scoreService.determinePoints(results);\n  \n    return <div>\n      <ScoreDisplay scores={scores} />\n      <AllResults results={results} />\n    </div>;\n};\n\nexport default PredictionsDisplay;","import React, {useEffect, useState} from 'react';\nimport 'app/pages/Pages.css';\nimport { GoogleLogin, GoogleLoginResponse, GoogleLoginResponseOffline } from 'react-google-login';\nimport PredictionsDisplay from 'app/components/predictions-display';\nimport { fetchResults } from 'app/service/google-sheets-service';\nimport { Results } from 'app/models/Results';\n\nconst PredictionsPage: React.FC = () => {\n  const [results, setResults] = useState<Results>();\n  const [token, setToken] = useState<string>(localStorage.getItem(\"token\") || \"\");\n  const [loggedIn, setLoggedIn] = useState<boolean>(!!localStorage.getItem(\"token\"));\n\n  const successGoogle = (res: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n    const result = res as GoogleLoginResponse;\n    if (!result) {\n      return;\n    }\n    localStorage.setItem(\"token\", result.accessToken);\n    setToken(result.accessToken);\n    setLoggedIn(true);\n  };\n\n  const logOut = () => {\n    setToken(\"\");\n    setLoggedIn(false);\n    localStorage.removeItem(\"token\");\n  };\n\n  useEffect(() => {\n    if (token) {\n      fetchResults(token).then((results) => {\n        setResults(results)\n      }).catch(() => {\n        logOut();\n      })\n    }\n  }, [token])\n\n  //eslint-disable-next-line\n  const failGoogle = (error: any) => {\n    setLoggedIn(false);\n  };\n  const clientId = `${process.env.REACT_APP_CLIENT_ID}`;\n\n  return (\n    <div className=\"App\">\n        {results && loggedIn\n          ? <PredictionsDisplay results={results} />\n          : <GoogleLogin \n          clientId={clientId}\n          buttonText=\"Login\"\n          onSuccess={successGoogle}\n          onFailure={failGoogle}\n          cookiePolicy={'single_host_origin'}\n          scope={\"https://www.googleapis.com/auth/spreadsheets.readonly\"} />\n        }\n    </div>\n  );\n}\n\nexport default PredictionsPage;\n","import { Results } from \"app/models/Results\";\n\ninterface SheetsResult {\n    values: string[][];\n}\n\nconst getResultsFromSheet: (sheet: SheetsResult) => Results = (sheet: SheetsResult) => {\n    const players = sheet.values[0].slice(5);\n    const games = sheet.values.slice(1).map((row) => {\n      const game = {\n        round: row[0],\n        time: row[1],\n        teamA: row[2],\n        teamB: row[3],\n        result: row[4],\n        predictions: row.slice(5),\n      };\n      return game;\n    });\n    return {\n      players: players,\n      games: games\n    }\n};\n\nexport const fetchResults = (token: string): Promise<Results> => {\n    const sheetsUrl = `https://sheets.googleapis.com/v4/spreadsheets/${process.env.REACT_APP_SPREADSHEET_ID}/values/Sheet1!A1:K20`;\n    return fetch(`${sheetsUrl}?access_token=${token}`).then((result) => {\n        if (!result.ok) {\n          throw new Error(\"Token expired\"); \n        }\n        return result.json();\n      }).then((result) => {\n        const parsedResults = getResultsFromSheet(result);\n        return parsedResults;\n    });\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport PredictionsPage from 'app/pages/predictions';\n\nconst App: React.FC = () => {\n  const redirect = sessionStorage.redirect;\n  delete sessionStorage.redirect;\n  if (redirect && redirect != location.href) {\n    history.replaceState(null, process.env.REACT_APP_BASE_URL || '', redirect);\n  }\n\n  return (\n  <Router basename={process.env.REACT_APP_BASE_URL}>\n    <div>\n      <Switch>\n        <Route path=\"/\">\n          <PredictionsPage />\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals: () => void = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'app/App';\nimport reportWebVitals from 'app/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}